//
//  MessagesViewController.swift
//  TapperMessagesExtension
//
//  Created by Jules on [Current Date].
//

import UIKit
import SwiftUI // Import SwiftUI
import Messages

class MessagesViewController: MSMessagesAppViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Initial presentation will be handled by willBecomeActive or willTransition
        print("MessagesViewController loaded.")
    }

    // MARK: - Conversation Handling

    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)
        presentContentView(for: conversation, with: presentationStyle)
    }

    override func didResignActive(with conversation: MSConversation) {
        super.didResignActive(with: conversation)
        // Resources are managed by SwiftUI view's lifecycle or ARC.
        // You might remove child view controllers here if necessary,
        // but UIHostingController should handle its view's lifecycle.
        removeAllChildViewControllers()
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // You might want to decode message.url or message.layout here
        // and update your UI or state accordingly.
        print("Received message: \(message.url?.absoluteString ?? "No URL")")
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        // You can use this to, for example, clear the input fields after sending.
        print("Did start sending message.")
        // Potentially request compact mode or clear UI.
        // For now, ContentView handles its own state.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
        print("Did cancel sending message.")
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        guard let conversation = activeConversation else {
            print("Error: No active conversation found during transition.")
            return
        }
        presentContentView(for: conversation, with: presentationStyle)
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
        // Finalize any behaviors associated with the change in presentation style if needed.
    }

    // MARK: - Present Content View

    private func presentContentView(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Remove any existing child view controllers to prevent overlap or multiple instances
        removeAllChildViewControllers()

        // Instantiate ContentView and pass `self` (MessagesViewController)
        // This allows ContentView to call `sendMessage` on this controller.
        let contentView = ContentView(messagesViewController: self)

        // Embed the SwiftUI view in a UIHostingController
        let hostingController = UIHostingController(rootView: contentView)

        addChild(hostingController)
        view.addSubview(hostingController.view)

        hostingController.view.frame = view.bounds
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        hostingController.didMove(toParent: self)

        // If you need to do something specific for compact vs expanded, you can check presentationStyle
        // For this app, ContentView itself might adapt, or be the same.
        // For example, if presentationStyle == .compact {
        //    // Potentially configure hostingController or contentView differently
        // }
    }

    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }

    // MARK: - Message Sending Logic

    func sendMessage(morse: String, text: String) {
        guard let conversation = activeConversation else {
            print("Error: No active conversation to send message.")
            return
        }

        let session = messageSession(for: conversation)
        let message = MSMessage(session: session)

        let layout = MSMessageTemplateLayout()
        layout.caption = text.isEmpty ? "Morse Code Message" : text // Show decoded text as caption
        layout.subcaption = morse // Show the Morse code itself
        // Example: layout.image = UIImage(named: "morse_icon.png") // Add an icon if you have one

        // You can provide a summary text for notifications or when the message is not expanded.
        message.summaryText = "Sent: \(text.isEmpty ? morse : text)"

        // For richer interaction, you can construct a URL with components.
        // This URL can be used by your app extension to reconstruct state if the message is tapped.
        var components = URLComponents()
        var queryItems = [URLQueryItem]()
        queryItems.append(URLQueryItem(name: "morse", value: morse))
        queryItems.append(URLQueryItem(name: "text", value: text))
        // queryItems.append(URLQueryItem(name: "version", value: "1.0"))
        components.queryItems = queryItems
        message.url = components.url // This URL is what gets passed to `didReceive` on the other end

        message.layout = layout

        conversation.insert(message) { [weak self] error in
            if let error = error {
                print("Error inserting message into conversation: \(error.localizedDescription)")
                // Handle error appropriately, maybe show an alert to the user
            } else {
                print("Message inserted successfully.")
                // Optionally, after sending, you might want to change the presentation style or clear UI.
                // self?.requestPresentationStyle(.compact)
                // self?.dismiss() // Dismisses the modal presentation of the iMessage app.
            }
        }
    }

    // Helper to get or create an MSSession
    private func messageSession(for conversation: MSConversation) -> MSSession {
        // If the conversation already has a session from your app, use it. Otherwise, create a new one.
        // This helps in threading messages from your extension.
        return conversation.selectedMessage?.session ?? MSSession()
    }
}
